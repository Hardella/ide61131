ext.mpsMajor = "2018.2"
ext.mpsMinor = "5"
ext.mbeddrBuildNumber = "1.1.+"
ext.mpsExtensionsVersion = "$mpsMajor.+"

buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
        mavenCentral()
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.0.+'
    }
}

repositories {
    maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    mavenCentral()
    ivy {
        url "https://download.jetbrains.com/mps/$mpsMajor/"
        layout 'pattern', {
            artifact "[module]-[revision].[ext]"
        }
        metadataSources { // skip downloading ivy.xml
            artifact()
        }
    }
}

configurations {
    mps
    mpsPlugins
}

dependencies {
    mps "com.jetbrains:MPS:$mpsMajor.${mpsMinor}@zip"
    mpsPlugins "de.itemis.mps:extensions:$mpsExtensionsVersion"
    mpsPlugins "com.mbeddr:platform:$mbeddrBuildNumber"
}

task downloadDependencies(type: Copy) {
    dependsOn configurations.mps
    dependsOn configurations.mpsPlugins
    from(zipTree(configurations.mps.singleFile)) {
        eachFile {
            // Replace "MPS 2018.2/abc/..." with "mps/abc/..." for predictable folder locations
            it.path = "mps/" + it.path.substring(it.relativePath.segments[0].length())
        }
    } into "lib"
    from {
        configurations.mpsPlugins.collect { zipTree(it) }
    } into "lib"
}

task clean() {
  doLast {
    def buildFiles = ['buildDistribution.xml', 'build.xml', 'buildBootstrap.xml']

    for (f in buildFiles) {
      if (!file(f).exists()) {
        continue;
      }
      ant.ant(antfile: f) {
        target(name: 'clean')
      }
    }
  }
}

task bootstrap(dependsOn: [downloadDependencies]) {
  inputs.files(file("solutions/com.hardella.build.bootstrap"))
  outputs.files([file("build.xml"), file("buildDistribution.xml")])
  doLast {
    ant.ant(antfile: 'buildBootstrap.xml') {
      target(name: 'generate')
    }
  }
}

def importMpsBuild(fileName, taskPrefix) {
  def antBuilder = antBuilderFactory.create()
  antBuilder.importBuild(fileName) { antTargetName ->
    taskPrefix + antTargetName
  }
  antBuilder
}

task languagesGenerate(dependsOn: [downloadDependencies]) {
  doLast {
    ant.ant(antfile: 'build.xml') {
      target(name: 'generate')
    }
  }
}

if (file('build.xml').exists() && file('buildDistribution.xml').exists()) {
  def languages = importMpsBuild('build.xml', 'languages-')

  tasks.'languages-fetchDependencies'.dependsOn languagesGenerate

  task buildRcp {
  }

  def distr = ['macOS', 'Linux', 'Windows']

  for (os in distr) {
    def t = task("build-$os", dependsOn: [tasks.'languages-build']) {
      doLast {
        ant.ant(antfile: 'buildDistribution.xml') {
          target(name: "layout.$os")
          property(name: "build.layout.$os", value: 'build/artifacts/st61131Distribution')
        }
      }
    }
    buildRcp.dependsOn t
  }

  defaultTasks 'buildRcp'
}
